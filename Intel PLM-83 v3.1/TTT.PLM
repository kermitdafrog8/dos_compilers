ttt: do;

$include(doslibs.inc)

declare scoreWin literally '6';
declare scoreTie literally '5';
declare scoreLose literally '4';
declare scoreMax literally '9';
declare scoreMin literally '2';
declare scoreInvalid literally '0';

declare pieceBlank literally '0';
declare pieceX literally '1';
declare pieceO literally '2';

declare iterations literally '10';

declare CR literally '13';
declare LF literally '10';

declare board( 9 ) byte;
declare movecount word;

print_line: procedure;
    call dos_direct_out( CR );
    call dos_direct_out( LF );
end print_line;

print_word: procedure( n, digits, base, leading_zeros ) reentrant;
    declare n word, digits integer, base word, leading_zeros byte;
    declare ch byte;

    if ( n < base ) then
        do;
            if leading_zeros then
                ch = '0';
            else
                ch = ' ';
            do while digits > 1;
                call dos_std_out( ch );
                digits = digits - 1;
            end;
            if n > 10 then
                ch = 'A' + ( n - 10 );
            else
                ch = '0' + n;
            call dos_std_out( ch );
        end;
    else
        do;
            call print_word( n / base, digits - 1, base, leading_zeros );
            call print_word( n mod base, 1, base, leading_zeros );
        end;
end print_word;

winner2: procedure( move ) word;
    declare move word;
    declare x word;

    do case move;
        do; /* 0 */
            x = board(0);
            if not ( ( ( x = board(1) ) and ( x = board(2) ) ) or
                     ( ( x = board(3) ) and ( x = board(6) ) ) or
                     ( ( x = board(4) ) and ( x = board(8) ) ) )
                then return PieceBlank;
            end;
        do; /* 1 */
            x = board(1);
            if not ( ( ( x = board(0) ) and ( x = board(2) ) ) or
                     ( ( x = board(4) ) and ( x = board(7) ) ) )
                then return PieceBlank;
            end;
        do; /* 2 */
            x = board(2);
            if not ( ( ( x = board(0) ) and ( x = board(1) ) ) or
                     ( ( x = board(5) ) and ( x = board(8) ) ) or
                     ( ( x = board(4) ) and ( x = board(6) ) ) )
                then return PieceBlank;
            end;
        do; /* 3 */
            x = board(3);
            if not ( ( ( x = board(4) ) and ( x = board(5) ) ) or
                     ( ( x = board(0) ) and ( x = board(6) ) ) )
                then return PieceBlank;
            end;
        do; /* 4 */
            x = board(4);
            if not ( ( ( x = board(0) ) and ( x = board(8) ) ) or
                     ( ( x = board(2) ) and ( x = board(6) ) ) or
                     ( ( x = board(1) ) and ( x = board(7) ) ) or
                     ( ( x = board(3) ) and ( x = board(5) ) ) )
                then return PieceBlank;
            end;
        do; /* 5 */
            x = board(5);
            if not ( ( ( x = board(3) ) and ( x = board(4) ) ) or
                     ( ( x = board(2) ) and ( x = board(8) ) ) )
                then return PieceBlank;
            end;
        do; /* 6 */
            x = board(6);
            if not ( ( ( x = board(7) ) and ( x = board(8) ) ) or
                     ( ( x = board(0) ) and ( x = board(3) ) ) or
                     ( ( x = board(4) ) and ( x = board(2) ) ) )
                then return PieceBlank;
            end;
        do; /* 7 */
            x = board(7);
            if not ( ( ( x = board(6) ) and ( x = board(8) ) ) or
                     ( ( x = board(1) ) and ( x = board(4) ) ) )
                then return PieceBlank;
            end;
        do; /* 8 */
            x = board(8);
            if not ( ( ( x = board(6) ) and ( x = board(7) ) ) or
                     ( ( x = board(2) ) and ( x = board(5) ) ) or
                     ( ( x = board(0) ) and ( x = board(4) ) ) )
                then return PieceBlank;
            end;
    end;

    return x;
end winner2;

minmax: procedure( alpha, beta, depth, move ) word reentrant;
    declare ( alpha, beta, depth, move ) word;
    declare ( p, value, pieceMove, score ) word;

/*
    do p = 0 to 8;
        call print_word( board( p ), 2, 10, 0 );
    end;

    call dos_std_string_out( @( '  moves, a, b, depth, move: ', 24h ) );
    call print_word( movecount, 5, 10, 0 );
    call print_word( alpha, 5, 10, 0 );
    call print_word( beta, 5, 10, 0 );
    call print_word( depth, 5, 10, 0 );
    call print_word( move, 5, 10, 0 );
    call print_line;
*/

    movecount = movecount + 1;

    if depth >= 4 then do;
        p = winner2( move );
        if p <> pieceBlank then do;
            if pieceX = p then return scoreWin;
            return scoreLose;
        end;

        if 8 = depth then return scoreTie;
    end;

    if ( depth and 1 ) = 1 then do;
        value = scoreMin;
        pieceMove = pieceX;
    end;
    else
    do;
        value = scoreMax;
        pieceMove = pieceO;
    end;

    do p = 0 to 8;
        if pieceBlank = board( p ) then do;
            board( p ) = pieceMove;
            score = minmax( alpha, beta, depth + 1, p );
            board( p ) = pieceBlank;

/*
            call print_word( alpha, 5, 10, 0 );
            call print_word( beta, 5, 10, 0 );
            call print_word( score, 5, 10, 0 );
            call print_word( value, 5, 10, 0 );
            call dos_std_string_out( @( '  alpha beta score value', CR, LF, 24h ) );
*/

            if pieceX = pieceMove then do;
                if score > value then do;
                    value = score;
                    if ( ( scoreWin = value ) or ( value >= beta ) ) then return value;
                    if value > alpha then alpha = value;
                end;
            end;
            else
            do;
                if score < value then do;
                    value = score;
                    if ( ( scoreLose = value ) or ( value <= alpha ) ) then return value;
                    if value < beta then beta = value;
                end;
            end;
        end;
    end;

    return value;
end minmax;

runit: procedure( move );
    declare ( move, score ) word;
    
    board( move ) = pieceX;
    score = minmax( scoreMin, scoreMax, 0, move );
    if scoreTie <> score then
        call dos_std_string_out( @( 'bug somewhere; score not tie', CR, LF, 24h ) );
    board( move ) = pieceBlank;
end runit;

do;
    declare i word;

    do i = 0 to 8;
        board( i ) = pieceBlank;
    end;

    do i = 1 to iterations;
        movecount = 0;
        call runit( 0 );
        call runit( 1 );
        call runit( 4 );
    end;

    call print_word( movecount, 5, 10, 0 );
    call dos_std_string_out( @( ' moves', CR, LF, 24h ) );

    call dos_exit( 0 );
end;

end;

